/*
	Для решения задач используйте базу данных lesson_4 (скрипт создания, прикреплен к 4 семинару). 
    1. Создайте представление, в которое попадет информация о  пользователях (имя, фамилия, город и пол), которые не старше 20 лет.
	2. Найдите кол-во,  отправленных сообщений каждым пользователем и  выведите ранжированный список пользователей, указав имя и 
    фамилию пользователя, количество отправленных сообщений и место в рейтинге (первое место у пользователя с максимальным количеством 
    сообщений) . (используйте DENSE_RANK)
	3. Выберите все сообщения, отсортируйте сообщения по возрастанию даты отправления (created_at) и найдите разницу 
    дат отправления между соседними сообщениями, получившегося списка. (используйте LEAD или LAG)
*/

CREATE DATABASE IF NOT EXISTS hw_5;
USE hw_5;

USE vk;
SELECT * FROM vk;


--  1. Создайте представление, в которое попадет информация о  пользователях (имя, фамилия, город и пол), которые не старше 20 лет.

CREATE OR REPLACE VIEW users_under_20 AS 
SELECT CONCAT(firstname, " ", lastname) AS "Пользователи младше 20 лет",
hometown,
gender
FROM users u
JOIN profiles p ON u.id = p.user_id
WHERE TIMESTAMPDIFF(YEAR, birthday, NOW()) < 21
GROUP BY u.id;

SELECT * FROM users_under_20;
DROP VIEW users_under_20;


/* 2. Найдите кол-во,  отправленных сообщений каждым пользователем и  выведите ранжированный список пользователей, 
	указав имя и фамилию пользователя, количество отправленных сообщений и место в рейтинге (первое место у 
    пользователя с максимальным количеством сообщений). (используйте DENSE_RANK) */

SELECT 
	DENSE_RANK() OVER (ORDER BY COUNT(from_user_id) DESC) AS "Место в рейтинге",
	CONCAT(firstname, " ", lastname) AS "Пользователь",
    COUNT(from_user_id) AS "Количество сообщений"
FROM users u
JOIN messages m ON u.id = m.from_user_id
GROUP BY u.id;


/* 3. Выберите все сообщения, отсортируйте сообщения по возрастанию даты отправления (created_at) и найдите разницу 
    дат отправления между соседними сообщениями, получившегося списка. (используйте LEAD или LAG) */

SELECT 	
	body,
    created_at,
    TIMEDIFF(created_at, LAG(created_at) OVER()) AS next_message
FROM messages
ORDER BY created_at;